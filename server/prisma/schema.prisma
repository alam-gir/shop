generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @unique @default(uuid())
  email         String       @unique
  emailVarified DateTime?
  name          String
  password      String?
  role          ROLE         @default(USER)
  refreshTokens String[]
  avatar        String?
  public_id     String?
  profile       UserProfile?
  orders        Order[]
  reviews       Review[]
  cartId        String?
  cart          Cart?        @relation(fields: [cartId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model UserProfile {
  id     String  @id @default(uuid())
  userId String  @unique
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name   String
  email  String
  bio    String?
  avatar String?
  role   ROLE    @default(USER)
}

model Product {
  id            String           @id @default(uuid())
  name          String
  brand         String?
  model         String?
  description   String?          @default("")
  price         Float?           @default(0)
  subTotalPrice Float?           @default(0)
  slug          String?          @unique
  images        Image[]
  categoryId    String?
  category      Category?        @relation(fields: [categoryId], references: [id])
  tags          String[]
  inventory     Inventory[]
  status        PRODUCTSTATUS    @default(INACTIVE)
  reviews       Review[]
  cart          ProductsOnCart[]
  discountId    String?
  discount      Discount?        @relation(fields: [discountId], references: [id])
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Category {
  id              String     @id @default(uuid())
  name            String     @unique
  banner          String?
  icon            String?
  iconPublic_id   String?
  bannerPublic_id String?
  products        Product[]
  parentId        String?
  parent          Category?  @relation("ParentCategory", fields: [parentId], references: [id])
  childrens       Category[] @relation("ParentCategory")
  discountId      String?
  discount        Discount?  @relation(fields: [discountId], references: [id])
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Discount {
  id                 String     @id @default(uuid())
  name               String
  description        String?
  percentage         Float?
  amount             Float?
  uptoLimit          Float?
  minimumOrderAmount Float?
  active             Boolean    @default(true)
  startDate          DateTime
  endDate            DateTime
  subDiscount        Boolean    @default(false)
  coupon             Coupon?
  brands             String[]
  products           Product[]
  categories         Category[]
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model Coupon {
  id         String   @id @default(uuid())
  code       String   @unique
  discountId String   @unique
  discount   Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
  active     Boolean  @default(true)
  limit      Int      @default(0)
  usedTimes  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Attribute {
  id        String                  @id @default(uuid())
  name      String
  value     String
  inventory AttributesOnInventory[]
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
}

model Inventory {
  id         String                  @id @default(uuid())
  quantity   Int
  productId  String
  product    Product                 @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributes AttributesOnInventory[]
  cart       ProductsOnCart[]
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
}

model AttributesOnInventory {
  inventoryId String
  attributeId String
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@unique([inventoryId, attributeId])
}

model Cart {
  id        String           @id @default(uuid())
  products  ProductsOnCart[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User[]
  orders    Order[]
}

model ProductsOnCart {
  cartId      String
  productId   String
  inventoryId String
  quantity    Int       @default(1)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart        Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId, inventoryId])
}

model HeroSliderImages {
  id     String              @id @default(uuid())
  images ImageOnHeroSlider[]
}

model ImageOnHeroSlider {
  id                 String           @id @default(uuid())
  active             Boolean          @default(true)
  url                String
  public_id          String
  heroSliderImagesId String
  heroSliderImages   HeroSliderImages @relation(fields: [heroSliderImagesId], references: [id], onDelete: Cascade)
}

model Order {
  id                String          @id @default(uuid())
  userId            String?
  user              User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartId            String
  cart              Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  shippingAddressId String
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id], onDelete: Cascade)
  statusId          String
  status            OrderStatus     @relation(fields: [statusId], references: [id], onDelete: Cascade)
  payment           Payment?
  orderCostId       String
  orderCost         OrderCost       @relation(fields: [orderCostId], references: [id], onDelete: Cascade)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model OrderStatus {
  id        String      @id @default(uuid())
  textCode  ORDERSTATUS @default(PENDING)
  message   String?     @default("Our team will contact you soon!")
  orders    Order[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderCost {
  id        String   @id @default(uuid())
  subTotal  Float?
  tax       Float?
  offer     Float?
  shipping  Float
  total     Float
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingAddress {
  id            String   @id @default(uuid())
  name          String
  phone         String
  urgentPhone   String?
  email         String
  district      String
  policeStation String
  address       String
  note          String?
  orders        Order[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String        @unique
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  method        PAYMENTMETHOD @default(COD)
  transactionId String?       @unique
  amount        Float
  status        PAYMENTSTATUS @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Shipping {
  id        String   @id @default(uuid())
  charge    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  url       String
  public_id String
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ORDERSTATUS {
  PENDING
  PROCESSING
  SHIPPING
  SHIPPED
  HOLD
  COMPLETED
  CANCELLED
  RETURNED
}

enum PAYMENTSTATUS {
  PENDING
  PAID
  CANCEL
  FAILED
  REFUNDED
}

enum PAYMENTMETHOD {
  COD
  NAGAD
  BKASH
  DBBL
  OTHERS
}

enum PRODUCTSTATUS {
  ACTIVE
  INACTIVE
}

enum ROLE {
  ADMIN
  USER
}
